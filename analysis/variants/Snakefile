rule main:
    input:
        gwas="gwasCatalog.hprc-v1.1-mc-grch38.sorted.gaf.gz.tbi",
        eqtls=expand('{tissue}.GTEx_Analysis_v8_eQTL.hprc-v1.1-mc-grch38.sorted.gaf.gz.tbi', tissue=config['tissue'])

rule genotype:
    input: "HG002.gt.min30bp.sorted.gaf.gz.tbi"

#
# tasks
#

rule dwl_gwas:
    output: "gwasCatalog.txt.gz"
    shell: "wget https://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/gwasCatalog.txt.gz"

rule dwl_eqtl:
    output: "GTEx_Analysis_v8_eQTL.tar"
    shell: "wget https://storage.googleapis.com/adult-gtex/bulk-qtl/v8/single-tissue-cis-qtl/GTEx_Analysis_v8_eQTL.tar"

rule dwl_pg:
    output: "hprc-v1.1-mc-grch38.gbz"
    shell: "wget https://s3-us-west-2.amazonaws.com/human-pangenomics/pangenomes/freeze/freeze1/minigraph-cactus/hprc-v1.1-mc-grch38/hprc-v1.1-mc-grch38.gbz"

rule convert_pg:
    input: 'hprc-v1.1-mc-grch38.gbz'
    output: 'hprc-v1.1-mc-grch38.pg'
    threads: 4
    shell: "vg convert -t {threads} -H -p {input} > {output}"

rule annotate_gwas:
    input:
        script='prepare_variant_paths.py',
        gwas='gwasCatalog.txt.gz',
        hprc_vcf='hprc-v1.1-mc-grch38.small.vcf.gz',
        hprc_pg='hprc-v1.1-mc-grch38.pg'
    output: temp('gwasCatalog.hprc-v1.1-mc-grch38.gaf')
    benchmark: 'benchmark/annotate_gwas.tsv'
    log: 'log/annotate_gwas.tsv'
    shell:
        """
        python3 {input.script} -v {input.gwas} -s gwas_catalog -p {input.hprc_vcf} -g {input.hprc_pg} -o {output} > {log}
        """

rule extract_eqtls:
    input: 'GTEx_Analysis_v8_eQTL.tar'
    output: temp('GTEx_Analysis_v8_eQTL/{tissue}.v8.signif_variant_gene_pairs.txt.gz')
    shell: 'tar -xf GTEx_Analysis_v8_eQTL.tar {output}'

rule annotate_eqtls:
    input:
        script='prepare_variant_paths.py',
        eqtls='GTEx_Analysis_v8_eQTL/{tissue}.v8.signif_variant_gene_pairs.txt.gz',
        hprc_vcf='hprc-v1.1-mc-grch38.small.vcf.gz',
        hprc_pg='hprc-v1.1-mc-grch38.pg'
    output: temp('{tissue}.GTEx_Analysis_v8_eQTL.hprc-v1.1-mc-grch38.gaf')
    benchmark: 'benchmark/annotate_eqtls.{tissue}.tsv'
    log: 'log/annotate_eqtls.{tissue}.tsv'
    shell:
        """
        python3 {input.script} -v {input.eqtls} -s gtex_eqtls -l {wildcards.tissue} -p {input.hprc_vcf} -g {input.hprc_pg} -o {output} > {log}
        """

rule sort_gaf:
    input: "{file}.gaf"
    output: "{file}.sorted.gaf.gz"
    benchmark: 'benchmark/sort_gaf.{file}.tsv'
    shell: "vg gamsort -G {input} | bgzip > {output}"

rule index_gaf:
    input: "{file}.sorted.gaf.gz"
    output: "{file}.sorted.gaf.gz.tbi"
    benchmark: 'benchmark/index_gaf.{file}.tsv'
    shell: "tabix -p gaf {input}"

rule pack_read_cov:
    input:
        gam=config['gam'],
        gbz=config['gbz']
    output: temp('{sample}.pack')
    benchmark: 'benchmark/{sample}.pack_read_cov.tsv'
    container: "docker://quay.io/jmonlong/vg-work:1.59.0_v1"
    threads: 4
    resources:
        mem='64GB',
        runtime='6h'
    shell: "vg pack -x {input.gbz} -g {input.gam} -Q 5 -t {threads} -o {output}"

rule genotype_vg_call:
    input:
        pack='{sample}.pack',
        gbz=config['gbz']
    output: '{sample}.gt.min30bp.vcf.gz'
    benchmark: 'benchmark/{sample}.genotype_vg_call.tsv'
    container: "docker://quay.io/jmonlong/vg-work:1.59.0_v1"
    threads: 4
    resources:
        mem='64GB',
        runtime='6h'
    shell:
        """
        vg call -t {threads} -k {input.pack} -Az -S GRCh38 -s {wildcards.sample} -c 30 {input.gbz} | gzip > {output}
        """

rule annotate_calls:
    input:
        script='prepare_variant_paths_from_gt_vcf.py',
        calls='HG002.gt.min30bp.vcf.gz',
        hprc_pg='hprc-v1.1-mc-grch38.pg'
    output: temp('HG002.gt.min30bp.gaf')
    benchmark: 'benchmark/annotate_calls.tsv'
    shell:
        """
        python3 {input.script} -v {input.calls} -g {input.hprc_pg} -o {output}
        """
